🌐 What is the difference between Named export, Default export, and * as export?

🔸ES6 provides us to import & export a module and use it in other files. ES6 provides two ways to export a module from a file: named export and default export. In Named export, one can have multiple named exports per file. Then import the specific exports they want surrounded in {} braces. The name of imported module has to be the same as the name of the exported module. In Named export, the component is exported from MyComponent.js file like:

🌐What are React Hooks?

🔸 In React version 16.8, React introduced a new pattern called Hooks. React Hooks are simple JavaScript functions that we can use to isolate the reusable part from a functional component. Hooks can be stateful and can manage side-effects. Hooks allow you to reuse stateful logic without changing your component hierarchy. This makes it easy to share Hooks among many components or with the community.

	* React provides a bunch of standard in-built hooks:

🔸useState: To manage states. Returns a stateful value and an updater function to update it.
🔸useEffect: To manage side-effects like API calls, subscriptions, timers, mutations, and more.
🔸useContext: To return the current value for a context.
🔸useReducer: A useState alternative to help with complex state management.
🔸useCallback: It returns a memorized version of a callback to help a child component not re-render unnecessarily.
🔸useMemo: It returns a memoized value that helps in performance optimizations.
🔸useRef: It returns a ref object with a current property. The ref object is mutable. It is mainly used to access a child component imperatively.
🔸useLayoutEffect: It fires at the end of all DOM mutations. It's best to use useEffect as much as possible over this one as the useLayoutEffect fires synchronously.
🔸useDebugValue: Helps to display a label in React DevTools for custom hooks.


🌐Why do we need useState Hook?

🔸 useState hook is used to maintain the state in our React application. It keeps track of the state changes so basically useState has the ability to encapsulate local state in a functional component. The useState hook is a special function that takes the initial state as an argument and returns an array of two entries. UseState encapsulate only singular value from the state, for multiple state need to have useState calls.



